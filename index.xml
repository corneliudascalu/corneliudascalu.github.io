<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome on Home</title>
    <link>/</link>
    <description>Recent content in Welcome on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Model-View-Presenter in Android</title>
      <link>/posts/mvp-in-android/</link>
      <pubDate>Tue, 24 Nov 2015 19:30:21 +0200</pubDate>
      
      <guid>/posts/mvp-in-android/</guid>
      <description>Intro A while ago I stumbled upon this article by Antonio Leiva about implementing the MVP architecture in Android. I’ve always wanted to organize my code better, and MVP sounded like a good idea. I theory, Android is all about MVC, with the Activity or Fragment being the controller and the view defined in XML layouts. In practice, you end up with a lot of view logic in the Activity. The MVP approach promises to solve this by assuming that the Activity or Fragment is the view, controlled by a Presenter.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/pages/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pages/about/</guid>
      <description>My name is Corneliu Dascălu and I&amp;rsquo;m a software engineer specializing in Android applications.</description>
    </item>
    
  </channel>
</rss>
