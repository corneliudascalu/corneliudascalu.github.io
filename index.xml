<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome on Home</title>
    <link>/</link>
    <description>Recent content in Welcome on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Dec 2021 15:18:56 +0200</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Resurrection</title>
      <link>/posts/revival/</link>
      <pubDate>Sat, 11 Dec 2021 15:18:56 +0200</pubDate>
      
      <guid>/posts/revival/</guid>
      <description>After a very long break of several years during which a lot of things happened in my personal and professional life, I decided to give this blogging thing another go. Not necessarily because of an unquenchable thirst for writing, but to help me keep track of my ongoing projects and things I learn.
So, without further ado, I&amp;rsquo;m starting a series of posts documenting my experience developing a small mobile application using different technologies for different platforms.</description>
    </item>
    
    <item>
      <title>Unit Testing: Why?</title>
      <link>/posts/unit-testing-why/</link>
      <pubDate>Fri, 27 Apr 2018 08:20:25 +0200</pubDate>
      
      <guid>/posts/unit-testing-why/</guid>
      <description>Photo by Steve Halama on Unsplash
A story I remember the first unit tests I have ever written. It happened on a long 6 hour train ride, with no internet and no USB cable to connect my phone to my laptop. I was developing an Android application and I had some great ideas I wanted to try, but no way to test the code I was writing. At the time, I didn’t know what an unit test was, but I had read something about unit testing, so I did what I could.</description>
    </item>
    
    <item>
      <title>Where I Rant Against Code Comments</title>
      <link>/posts/rant-code-comments/</link>
      <pubDate>Mon, 05 Dec 2016 08:11:36 +0200</pubDate>
      
      <guid>/posts/rant-code-comments/</guid>
      <description>I hate code comments. I hate reading comments and I hate writing comments. It’s one of the first things I notice in a new project, and it’s usually a red flag about the code quality.
I know people that swear by code comments. They feel helpless if the code is not commented extensively. And they usually have several arguments for why comments are needed.
I have to explain what a method does.</description>
    </item>
    
    <item>
      <title>Testing Legacy Code: Frameworks</title>
      <link>/posts/testing-frameworks/</link>
      <pubDate>Thu, 13 Oct 2016 08:01:59 +0200</pubDate>
      
      <guid>/posts/testing-frameworks/</guid>
      <description>One often encountered feature of legacy code is a tight coupling to an external framework or SDK. It may be in the form of a “Manager” or “ApiClient” singleton, used throughout the application in the most critical areas. Or it may be more subtle, like making use of a “DateUtil” class provided by the framework.
You may ask “What’s your problem? Why should I reinvent the wheel?”. No, you shouldn’t. Hear me out.</description>
    </item>
    
    <item>
      <title>Testing Legacy Code: Hidden Dependencies</title>
      <link>/posts/testing-hidden-dependencies/</link>
      <pubDate>Fri, 23 Sep 2016 07:52:00 +0200</pubDate>
      
      <guid>/posts/testing-hidden-dependencies/</guid>
      <description>Let’s talk about The God Object, The Blob, that giant method with hundreds of lines that does a million things. You know it, it’s that class that powers the entire application and everyone in the team is afraid to change even a single line of code.
Usually, that’s the class that “just works” because it has been polished with the tears of the poor developers who have fixed countless bugs during the long years of its existence.</description>
    </item>
    
    <item>
      <title>Testing Legacy Code: Singletons</title>
      <link>/posts/testing-legacy-code/</link>
      <pubDate>Mon, 11 Jul 2016 07:36:41 +0200</pubDate>
      
      <guid>/posts/testing-legacy-code/</guid>
      <description>You know that guy that works on that messy codebase? The guy that always has a story about some weird bug he spent several days on? If you ask him what is the worst part about that code, his answer might be something like
f you don’t know why that is bad consider yourself lucky. If you just chuckled bitterly, then you know what a plague they are when you need to put your code in a test harness.</description>
    </item>
    
    <item>
      <title>Git is fun</title>
      <link>/posts/git-is-fun/</link>
      <pubDate>Thu, 26 Nov 2015 15:31:49 +0200</pubDate>
      
      <guid>/posts/git-is-fun/</guid>
      <description>Many people are put off by Git because it seems difficult. For people transitioning from SVN, for example, the idea of local commits is often difficult to grasp. Using the command line tools is even more off-putting for people used to rich GUI tools.
However, after getting past the initial learning curve, you start feeling the power of Git on the command line.
But before saying anything else, I want to argue for using Git on the command line as the only way to really learn Git.</description>
    </item>
    
    <item>
      <title>Model-View-Presenter in Android</title>
      <link>/posts/mvp-in-android/</link>
      <pubDate>Tue, 24 Nov 2015 19:30:21 +0200</pubDate>
      
      <guid>/posts/mvp-in-android/</guid>
      <description>Intro A while ago I stumbled upon this article by Antonio Leiva about implementing the MVP architecture in Android. I’ve always wanted to organize my code better, and MVP sounded like a good idea. I theory, Android is all about MVC, with the Activity or Fragment being the controller and the view defined in XML layouts. In practice, you end up with a lot of view logic in the Activity. The MVP approach promises to solve this by assuming that the Activity or Fragment is the view, controlled by a Presenter.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/pages/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/pages/about/</guid>
      <description>My name is Corneliu Dascălu and I&amp;rsquo;m a software engineer specializing in Android applications.</description>
    </item>
    
  </channel>
</rss>
